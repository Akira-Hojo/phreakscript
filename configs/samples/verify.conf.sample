;
; Verification Configuration
;
; This file is used by app_verify to verify incoming and outgoing calls
; using reverse IP address checks or a custom API, across telephony domains.
; Only IAX2 is supported.
;
[general]
;
; Timeout for any curl requests
;
curltimeout = 5
;
;
;[sample]
;
; Method to use for verification. Can be "reverse" to manually compute
; verification using reverse lookups or "direct" to query an authoritative
; central server via HTTP for the result. Default is "reverse".
;
;verifymethod = reverse
;
; Method to use for making verification requests. Can be "curl" for
; HTTP lookups or "enum" for ENUM lookups. Default is "curl". Must
; be "curl" if verifymethod is "direct".
;
;requestmethod = curl
;
; Request to make for verification requests. URL for "curl" lookups
; or arguments to ENUMLOOKUP function for "enum" lookups. Parameter
; for number should be replaced with ${VERIFYARG1} for substitution
; during verification. Dialplan variables may be used.
;
;verifyrequest = https://example.com/v1/?number=${VERIFYARG1}
;
; Name of variable in which to store the verification result. Be sure
; to prefix with double underscore if the variable should carry through
; Dial. To make the variable persist through Dial, be sure to prefix with
; double underscore if desired.
;
;local_var = __cvs
;
; Number on this node which can be used against us in a reverse lookup for
; positive identification. A lookup for this number in the telephony domain
; must resolve to this node. Any such number will suffice.
;
;via_number = 5551212
;
; Name of remote variable (probably an IAXVAR) in which the verification result
; is attested by the upstream node. If extendtrust is yes and verification succeeds,
; the contents of this variable will be used to populate local_var.  Must be
; universal across a telephony domain.
;
;remote_var = IAXVAR(cvs)
;
; Name of remote variable (probably an IAXVAR) in which the node identifier
; for the upstream node, if present, may be found. Needed for tandem-through
; verification (see extendtrust option). Must be universal across a telephony domain.
;
;via_remote_var = IAXVAR(via)
;
; Variable assignments to make after verification of an incoming call has completed.
; This will apply to all calls, successful or not. This can allow for loading other
; remote variables into local variables (e.g. storing IAXVARs in channel variables).
; It can also allow for variable parameter operations, if you know that certain fields
; will need to be manipulated. The format here is the same as MSet's, but assignments
; will be done left to right, so later operations can depend on earlier operations
; completing. Values containing commas MUST be surrounded in single quotes.
;
;setinvars = __mlpp=${IAXVAR(mlpp)},myvar=${IAXVAR(myvar)},myvar2='${CUT(myvar,\,,2)}'
;
; Opposite of setinvars: variable assignments made after OutVerify has completed.
;
;setoutvars = IAXVAR(mlpp)=${mlpp}
;
; Whether or not to perform basic sanity checks on the alleged calling number
; for "reverse" verification scenarios. This should be used if there is any
; possibility of invalid numbers resolving to *anything*. If it is guaranteed
; that invalid numbers will always return an empty lookup, this can be disabled.
; attested verified. Default is "yes".
;
;sanitychecks = yes
;
; Whether or not to allow thru calls (i.e. not originating on the upstream node)
; to be verified by instead verifying the node which is passing the call off.
; This must be set to "yes" if calls can pass through multiple nodes between
; originating and termination. Default is "yes".
;
;extendtrust = yes
;
; Whether or not to allow thru-dialing out of the node. Default is yes.
;
;allowdisathru = yes
;
; Whether or not to allow PSTN calls to leave the node. Default is yes.
;
;allowpstnthru = yes
;
; Whether or not to allow token verification. Only supported for "reverse"
; verification. "direct" must encompass tokens in the verify request.
; Useful for scenarios where the outgoing IP of a node does not match
; the incoming IP of a node. This applies to both allowing tokens for
; incoming calls and requesting tokens for outgoing calls.
; Request must return the same value as via_remote_var for success.
; Default is no.
;
;allowtoken = no
;
; Request to make for token verification. Only supported for "reverse"
; verifications. Must be an HTTP endpoint. Dialplan variables may be used.
;
;validatetokenrequest = https://api.example.com/v1/?token=${IAXVAR(verifytoken)}
;
; Request to make for obtaining a verification token upon an outgoing call.
; Dialplan variables may be used.
;
;obtaintokenrequest = https://api.example.com/v1/?key=${mysecret}
;
; Name of remote variable (probably an IAXVAR) in which a verification token
; may be stored. Must be universal across a telephony domain.
;
;token_remote_var = nodevia
;
; Name of dialplan context containing extension pattern matches for numbers
; which may not be verifiable using reverse IP address lookups. The extension
; must return a comma-separated list of IP addresses which the specified numbers
; can validate against, at priority 1 for the extension. Only applies with
; "reverse", not "direct". Avoid using this option if possible, and only
; use as a last resort.
;
;exceptioncontext = yes
;
; Maximum number of unsuccessfully verified calls to accept before subsequent calls
; are dropped upon arrival. Default is 0, e.g. any call that fails to verify will
; be dropped. In reality, you may want to set this to a more conservative value
; to allow for some legitimate accident calls to get through. The greater this value,
; the more vulnerable the node is to a spam attack. This option is only effective
; if failgroup is specified, since the group is used to keep track of concurrent calls.
;
;threshold = 5
;
; Group category to which to assign calls that fail verification. The group will be
; the name of this verification section, e.g. same as Set(GROUP(failgroup)=example).
;
;failgroup = spam
;
; Action to take when a call fails verification. Note that if the failure threshold
; specified in the "threshold" option is reached, any subsequent calls will be
; immediately dropped to prevent a spam attack, regardless of this setting.
; Valid options are "nothing", which will take no action, "hangup" which will end
; the call, "playback" which will play a recording and then hang up, and "redirect"
; which will redirect the call to another dialplan extension. Default is "nothing".
;
;failureaction = nothing
;
; File or ampersand-separated files to play when failureaction = playback. As with
; Playback, do not specify the file extension(s).
;
;failurefile = custom/goodbye-spammer
;
; Dialplan extension (context,extension,priority) to redirect failed calls when
; failureaction = redirect.
;
;failurelocation = quarantine,s,1
;
; Region identifier (e.g. 2 characters) to use for tagging PSTN calls that
; enter and leave this node. Tagging format is
; "${CALLERID(name)} via ${clli} ${region} PSTN".
;
;region = US
;
; String node identifier (e.g. CLLI) to use for tagging calls that leave this node.
; Tagging format is "${CALLERID(name)} via ${clli}" for normal thru calls and
; "${CALLERID(name)} via ${clli} PSTN" for PSTN calls.
;
;clli = HSTNTXMOCG0
;
; Codes to assign to calls we attempt to verify. These codes MUST be the same across
; a telephony domain. For multiple networks, these codes should be unique (e.g.
; prefix with a network-specific number).
;
; Code to assign to local_var for successfully verified calls.
;
;code_good = 0
;
; Code to assign to local_var for unsuccessfully verified calls.
;
;code_fail = 1
;
; Code to assign to local_var for calls that could not be verified (e.g. request failure).
;
;code_requestfail = 7
;
; Code to assign to local_var for spoofed calls.
;
;code_spoof = 9
