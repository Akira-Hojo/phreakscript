diff --git a/patches/kdrivers/include/wanpipe_kernel.h b/patches/kdrivers/include/wanpipe_kernel.h
index fffef26..215d8d0 100644
--- a/patches/kdrivers/include/wanpipe_kernel.h
+++ b/patches/kdrivers/include/wanpipe_kernel.h
@@ -87,6 +87,66 @@
 #define WAN_DEV_NAME(device) device->dev.bus_id
 #endif
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0)
+#define virt_to_bus virt_to_phys
+#define bus_to_virt phys_to_virt
+#endif
+
+static inline struct sk_buff *
+wp_skb_recv_datagram_noblock(struct sock *sk, unsigned int flags, int *err)
+{
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0)
+	return skb_recv_datagram(sk, flags | MSG_DONTWAIT, err);
+#else
+	return skb_recv_datagram(sk, flags, 1, err);
+#endif
+}
+
+
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 18, 0)
+#include <linux/dma-mapping.h>
+
+#define PCI_DMA_TODEVICE	DMA_TO_DEVICE
+#define PCI_DMA_FROMDEVICE	DMA_FROM_DEVICE
+
+static inline void *
+pci_alloc_consistent(struct pci_dev *hwdev, size_t size, dma_addr_t *dma_handle)
+{
+	return dma_alloc_coherent(hwdev == NULL ? NULL : &hwdev->dev, size, dma_handle, GFP_ATOMIC);
+}
+
+static inline void
+pci_free_consistent(struct pci_dev *hwdev, size_t size, void *vaddr, dma_addr_t dma_handle)
+{
+	dma_free_coherent(hwdev == NULL ? NULL : &hwdev->dev, size, vaddr, dma_handle);
+}
+
+static inline dma_addr_t
+pci_map_single(struct pci_dev *hwdev, void *ptr, size_t size, int direction)
+{
+	return dma_map_single(&hwdev->dev, ptr, size, (enum dma_data_direction)direction);
+}
+
+static inline void
+pci_unmap_single(struct pci_dev *hwdev, dma_addr_t dma_addr, size_t size, int direction)
+{
+	dma_unmap_single(&hwdev->dev, dma_addr, size, (enum dma_data_direction)direction);
+}
+
+static inline void
+pci_dma_sync_single_for_cpu(struct pci_dev *hwdev, dma_addr_t dma_handle, size_t size, int direction)
+{
+	dma_sync_single_for_cpu(&hwdev->dev, dma_handle, size, (enum dma_data_direction)direction);
+}
+
+static inline void
+pci_dma_sync_single_for_device(struct pci_dev *hwdev, dma_addr_t dma_handle, size_t size, int direction)
+{
+	dma_sync_single_for_device(&hwdev->dev, dma_handle, size, (enum dma_data_direction)direction);
+}
+
+#endif
+
 /////////////2.6.36/////////////////////////////
 /* enable UNLOCKED_IOCTL for all kernel version > 5.9.0 */
 #if (LINUX_VERSION_CODE >= KERNEL_VERSION(5,9,0))
@@ -188,8 +248,7 @@ void *PDE_DATA(const struct inode *inode)
  *==========================================================================*/
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(3,0,0)
  #define LINUX_3_0
- /* Not sure exactly when they removed write_proc_t, but in 3.11.8 is not there anymore */
- #if defined(KERN_PROC_PDE_FEATURE) && KERN_PROC_PDE_FEATURE > 0
+ #if LINUX_VERSION_CODE >= KERNEL_VERSION(3,10,0)
    typedef int (write_proc_t)(struct file *, const char *, unsigned long, void *);
  #endif
  #ifndef pci_dev_b
@@ -286,7 +345,9 @@ void *PDE_DATA(const struct inode *inode)
 
  #define dev_init_buffers(a)
 
- #if defined(KERN_PROC_PDE_FEATURE) && KERN_PROC_PDE_FEATURE > 0
+ #if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 17, 0)
+ # define WP_PDE_DATA pde_data
+ #elif defined(KERN_PROC_PDE_FEATURE) && KERN_PROC_PDE_FEATURE > 0
  # define WP_PDE_DATA PDE_DATA
  #else 
  #include <linux/proc_fs.h>
diff --git a/patches/kdrivers/src/net/wanpipe_cdev_linux.c b/patches/kdrivers/src/net/wanpipe_cdev_linux.c
index 998992b..4b19416 100644
--- a/patches/kdrivers/src/net/wanpipe_cdev_linux.c
+++ b/patches/kdrivers/src/net/wanpipe_cdev_linux.c
@@ -1014,9 +1014,11 @@ EXPORT_SYMBOL(wanpipe_global_cdev_free);
 
 EXPORT_SYMBOL(wanpipe_cdev_free);
 
+#if defined (KERN_MODPOST_STATIC_ERR) && KERN_MODPOST_STATIC_ERR > 0
 EXPORT_SYMBOL(wanpipe_cdev_tx_wake);
 EXPORT_SYMBOL(wanpipe_cdev_rx_wake);
 EXPORT_SYMBOL(wanpipe_cdev_event_wake);
+#endif
 EXPORT_SYMBOL(wanpipe_cdev_tdm_create);
 EXPORT_SYMBOL(wanpipe_cdev_tdm_ctrl_create);
 EXPORT_SYMBOL(wanpipe_cdev_cfg_ctrl_create);
diff --git a/patches/kdrivers/src/wanrouter/af_wanpipe.c b/patches/kdrivers/src/wanrouter/af_wanpipe.c
index cee7da2..7378acb 100644
--- a/patches/kdrivers/src/wanrouter/af_wanpipe.c
+++ b/patches/kdrivers/src/wanrouter/af_wanpipe.c
@@ -238,7 +238,7 @@ static int wanpipe_ioctl(struct socket *sock, unsigned int cmd, unsigned long ar
 					AF_SKB_DEC(skb->truesize);
 					skb_free_datagram(sk, skb);
 				}
-				while ((skb=skb_recv_datagram(sk,0,1,&err)) != NULL){
+				while ((skb=wp_skb_recv_datagram_noblock(sk,0,&err)) != NULL){
 					AF_SKB_DEC(skb->truesize);
 					skb_free_datagram(sk, skb);
 				}
@@ -600,7 +600,11 @@ static int wanpipe_accept(struct socket *sock, struct socket *newsock, int flags
 		return -EPROTOTYPE;
 
 	add_wait_queue(WAN_SK_SLEEP(sk),&wait);
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 14, 0)
+	WRITE_ONCE(current->__state, TASK_INTERRUPTIBLE);
+#else
 	current->state = TASK_INTERRUPTIBLE;
+#endif
 	for (;;){
 		skb = skb_dequeue(&sk->sk_receive_queue);
 		if (skb){
@@ -619,7 +623,11 @@ static int wanpipe_accept(struct socket *sock, struct socket *newsock, int flags
 		}
 		schedule();
 	}
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 14, 0)
+	WRITE_ONCE(current->__state, TASK_RUNNING);
+#else
 	current->state = TASK_RUNNING;
+#endif
 	remove_wait_queue(WAN_SK_SLEEP(sk),&wait);
 
 	if (err != 0)
@@ -1688,7 +1696,7 @@ static int wanpipe_recvmsg(struct socket *sock, struct msghdr *msg, int len,
 	if (flags & MSG_OOB){	
 		skb=skb_dequeue(&sk->sk_error_queue);
 	}else{
-		skb=skb_recv_datagram(sk,flags,1,&err);
+		skb=wp_skb_recv_datagram_noblock(sk,flags,&err);
 	}
 	/*
 	 *	An error occurred so return it. Because skb_recv_datagram() 
diff --git a/patches/kdrivers/src/wanrouter/af_wanpipe_annexg_api.c b/patches/kdrivers/src/wanrouter/af_wanpipe_annexg_api.c
index bbec8bd..02220ca 100644
--- a/patches/kdrivers/src/wanrouter/af_wanpipe_annexg_api.c
+++ b/patches/kdrivers/src/wanrouter/af_wanpipe_annexg_api.c
@@ -1350,7 +1350,7 @@ int wanpipe_annexg_recvmsg(struct socket *sock, struct msghdr *msg, int len,
 	if (flags & MSG_OOB){	
 		skb=skb_dequeue(&sk->error_queue);
 	}else{
-		skb=skb_recv_datagram(sk,flags,1,&err);
+		skb=wp_skb_recv_datagram_noblock(sk,flags,&err);
 	}
 	/*
 	 *	An error occurred so return it. Because skb_recv_datagram() 